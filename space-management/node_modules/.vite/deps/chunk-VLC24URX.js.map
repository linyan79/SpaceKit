{
  "version": 3,
  "sources": ["../../its-fine/src/index.tsx"],
  "sourcesContent": ["import * as React from 'react'\r\nimport type ReactReconciler from 'react-reconciler'\r\n\r\n/**\r\n * An SSR-friendly useLayoutEffect.\r\n *\r\n * React currently throws a warning when using useLayoutEffect on the server.\r\n * To get around it, we can conditionally useEffect on the server (no-op) and\r\n * useLayoutEffect elsewhere.\r\n *\r\n * @see https://github.com/facebook/react/issues/14927\r\n */\r\nconst useIsomorphicLayoutEffect =\r\n  typeof window !== 'undefined' && (window.document?.createElement || window.navigator?.product === 'ReactNative')\r\n    ? React.useLayoutEffect\r\n    : React.useEffect\r\n\r\n/**\r\n * Represents a react-internal Fiber node.\r\n */\r\nexport type Fiber<T = any> = Omit<ReactReconciler.Fiber, 'stateNode'> & { stateNode: T }\r\n\r\n/**\r\n * Represents a {@link Fiber} node selector for traversal.\r\n */\r\nexport type FiberSelector<T = any> = (\r\n  /** The current {@link Fiber} node. */\r\n  node: Fiber<T | null>,\r\n) => boolean | void\r\n\r\n/**\r\n * Traverses up or down a {@link Fiber}, return `true` to stop and select a node.\r\n */\r\nexport function traverseFiber<T = any>(\r\n  /** Input {@link Fiber} to traverse. */\r\n  fiber: Fiber | undefined,\r\n  /** Whether to ascend and walk up the tree. Will walk down if `false`. */\r\n  ascending: boolean,\r\n  /** A {@link Fiber} node selector, returns the first match when `true` is passed. */\r\n  selector: FiberSelector<T>,\r\n): Fiber<T> | undefined {\r\n  if (!fiber) return\r\n  if (selector(fiber) === true) return fiber\r\n\r\n  let child = ascending ? fiber.return : fiber.child\r\n  while (child) {\r\n    const match = traverseFiber(child, ascending, selector)\r\n    if (match) return match\r\n\r\n    child = ascending ? null : child.sibling\r\n  }\r\n}\r\n\r\n// In development, React will warn about using contexts between renderers.\r\n// Hide the warning because its-fine fixes this issue\r\n// https://github.com/facebook/react/pull/12779\r\nfunction wrapContext<T>(context: React.Context<T>): React.Context<T> {\r\n  try {\r\n    return Object.defineProperties(context, {\r\n      _currentRenderer: {\r\n        get() {\r\n          return null\r\n        },\r\n        set() {},\r\n      },\r\n      _currentRenderer2: {\r\n        get() {\r\n          return null\r\n        },\r\n        set() {},\r\n      },\r\n    })\r\n  } catch (_) {\r\n    return context\r\n  }\r\n}\r\n\r\nconst error = console.error\r\nconsole.error = function () {\r\n  const message = [...arguments].join('')\r\n  if (message?.startsWith('Warning:') && message.includes('useContext')) {\r\n    console.error = error\r\n    return\r\n  }\r\n\r\n  return error.apply(this, arguments as any)\r\n}\r\n\r\nconst FiberContext = wrapContext(React.createContext<Fiber>(null!))\r\n\r\n/**\r\n * A react-internal {@link Fiber} provider. This component binds React children to the React Fiber tree. Call its-fine hooks within this.\r\n */\r\nexport class FiberProvider extends React.Component<{ children?: React.ReactNode }> {\r\n  private _reactInternals!: Fiber\r\n\r\n  render() {\r\n    return <FiberContext.Provider value={this._reactInternals}>{this.props.children}</FiberContext.Provider>\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the current react-internal {@link Fiber}. This is an implementation detail of [react-reconciler](https://github.com/facebook/react/tree/main/packages/react-reconciler).\r\n */\r\nexport function useFiber(): Fiber<null> | undefined {\r\n  const root = React.useContext(FiberContext)\r\n  if (root === null) throw new Error('its-fine: useFiber must be called within a <FiberProvider />!')\r\n\r\n  const id = React.useId()\r\n  const fiber = React.useMemo(() => {\r\n    for (const maybeFiber of [root, root?.alternate]) {\r\n      if (!maybeFiber) continue\r\n      const fiber = traverseFiber<null>(maybeFiber, false, (node) => {\r\n        let state = node.memoizedState\r\n        while (state) {\r\n          if (state.memoizedState === id) return true\r\n          state = state.next\r\n        }\r\n      })\r\n      if (fiber) return fiber\r\n    }\r\n  }, [root, id])\r\n\r\n  return fiber\r\n}\r\n\r\n/**\r\n * Represents a react-reconciler container instance.\r\n */\r\nexport interface ContainerInstance<T = any> {\r\n  containerInfo: T\r\n}\r\n\r\n/**\r\n * Returns the current react-reconciler container info passed to {@link ReactReconciler.Reconciler.createContainer}.\r\n *\r\n * In react-dom, a container will point to the root DOM element; in react-three-fiber, it will point to the root Zustand store.\r\n */\r\nexport function useContainer<T = any>(): T | undefined {\r\n  const fiber = useFiber()\r\n  const root = React.useMemo(\r\n    () => traverseFiber<ContainerInstance<T>>(fiber, true, (node) => node.stateNode?.containerInfo != null),\r\n    [fiber],\r\n  )\r\n\r\n  return root?.stateNode.containerInfo\r\n}\r\n\r\n/**\r\n * Returns the nearest react-reconciler child instance or the node created from {@link ReactReconciler.HostConfig.createInstance}.\r\n *\r\n * In react-dom, this would be a DOM element; in react-three-fiber this would be an instance descriptor.\r\n */\r\nexport function useNearestChild<T = any>(\r\n  /** An optional element type to filter to. */\r\n  type?: keyof JSX.IntrinsicElements,\r\n): React.MutableRefObject<T | undefined> {\r\n  const fiber = useFiber()\r\n  const childRef = React.useRef<T>()\r\n\r\n  useIsomorphicLayoutEffect(() => {\r\n    childRef.current = traverseFiber<T>(\r\n      fiber,\r\n      false,\r\n      (node) => typeof node.type === 'string' && (type === undefined || node.type === type),\r\n    )?.stateNode\r\n  }, [fiber])\r\n\r\n  return childRef\r\n}\r\n\r\n/**\r\n * Returns the nearest react-reconciler parent instance or the node created from {@link ReactReconciler.HostConfig.createInstance}.\r\n *\r\n * In react-dom, this would be a DOM element; in react-three-fiber this would be an instance descriptor.\r\n */\r\nexport function useNearestParent<T = any>(\r\n  /** An optional element type to filter to. */\r\n  type?: keyof JSX.IntrinsicElements,\r\n): React.MutableRefObject<T | undefined> {\r\n  const fiber = useFiber()\r\n  const parentRef = React.useRef<T>()\r\n\r\n  useIsomorphicLayoutEffect(() => {\r\n    parentRef.current = traverseFiber<T>(\r\n      fiber,\r\n      true,\r\n      (node) => typeof node.type === 'string' && (type === undefined || node.type === type),\r\n    )?.stateNode\r\n  }, [fiber])\r\n\r\n  return parentRef\r\n}\r\n\r\nexport type ContextMap = Map<React.Context<any>, any> & {\r\n  get<T>(context: React.Context<T>): T | undefined\r\n}\r\n\r\n/**\r\n * Returns a map of all contexts and their values.\r\n */\r\nexport function useContextMap(): ContextMap {\r\n  const fiber = useFiber()\r\n  const [contextMap] = React.useState(() => new Map<React.Context<any>, any>())\r\n\r\n  // Collect live context\r\n  contextMap.clear()\r\n  let node = fiber\r\n  while (node) {\r\n    if (node.type && typeof node.type === 'object') {\r\n      // https://github.com/facebook/react/pull/28226\r\n      const enableRenderableContext = node.type._context === undefined && node.type.Provider === node.type\r\n      const context = enableRenderableContext ? node.type : node.type._context\r\n      if (context && context !== FiberContext && !contextMap.has(context)) {\r\n        contextMap.set(context, React.useContext(wrapContext(context)))\r\n      }\r\n    }\r\n\r\n    node = node.return!\r\n  }\r\n\r\n  return contextMap\r\n}\r\n\r\n/**\r\n * Represents a react-context bridge provider component.\r\n */\r\nexport type ContextBridge = React.FC<React.PropsWithChildren<{}>>\r\n\r\n/**\r\n * React Context currently cannot be shared across [React renderers](https://reactjs.org/docs/codebase-overview.html#renderers) but explicitly forwarded between providers (see [react#17275](https://github.com/facebook/react/issues/17275)). This hook returns a {@link ContextBridge} of live context providers to pierce Context across renderers.\r\n *\r\n * Pass {@link ContextBridge} as a component to a secondary renderer to enable context-sharing within its children.\r\n */\r\nexport function useContextBridge(): ContextBridge {\r\n  const contextMap = useContextMap()\r\n\r\n  // Flatten context and their memoized values into a `ContextBridge` provider\r\n  return React.useMemo(\r\n    () =>\r\n      Array.from(contextMap.keys()).reduce(\r\n        (Prev, context) => (props) =>\r\n          (\r\n            <Prev>\r\n              <context.Provider {...props} value={contextMap.get(context)} />\r\n            </Prev>\r\n          ),\r\n        (props) => <FiberProvider {...props} />,\r\n      ),\r\n    [contextMap],\r\n  )\r\n}\r\n"],
  "mappings": "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",
  "names": ["fiber"]
}
